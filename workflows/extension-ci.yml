name: Extension CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'einsteini-extension/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'einsteini-extension/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: einsteini-extension
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: einsteini-extension/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting (ESLint)
      run: npx eslint . --ext .js,.ts || echo "No ESLint configuration found"
    
    - name: Validate manifest.json
      run: |
        node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
          console.log('Manifest version:', manifest.manifest_version);
          console.log('Extension version:', manifest.version);
          if (manifest.manifest_version !== 3) {
            throw new Error('Manifest must be version 3');
          }
        "
    
    - name: Check required files
      run: |
        test -f manifest.json || (echo "manifest.json missing" && exit 1)
        test -f background.js || (echo "background.js missing" && exit 1)
        test -f contentScript.js || (echo "contentScript.js missing" && exit 1)
        test -f popup.html || (echo "popup.html missing" && exit 1)
        test -f popup.js || (echo "popup.js missing" && exit 1)
    
    - name: Test extension structure
      run: |
        echo "Checking extension structure..."
        ls -la
        echo "Icons directory:"
        ls -la icons/ || echo "No icons directory"

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: einsteini-extension
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: einsteini-extension/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build extension
      run: npm run build || echo "No build script found, using source files"
    
    - name: Create extension package
      run: |
        # Create a clean directory for packaging
        mkdir -p dist
        
        # Copy necessary files (exclude development files)
        cp manifest.json dist/
        cp *.js dist/ 2>/dev/null || true
        cp *.html dist/ 2>/dev/null || true
        cp *.css dist/ 2>/dev/null || true
        cp *.png dist/ 2>/dev/null || true
        
        # Copy directories if they exist
        [ -d icons ] && cp -r icons dist/ || true
        [ -d images ] && cp -r images dist/ || true
        [ -d _locales ] && cp -r _locales dist/ || true
        [ -d fonts ] && cp -r fonts dist/ || true
        
        # Create ZIP file
        cd dist
        zip -r ../einsteini-extension-v$(node -p "require('../manifest.json').version").zip .
    
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: einsteini-extension/einsteini-extension-*.zip
    
    - name: Upload source for review
      uses: actions/upload-artifact@v4
      with:
        name: extension-source
        path: |
          einsteini-extension/
          !einsteini-extension/node_modules
          !einsteini-extension/.git

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: einsteini-extension
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: einsteini-extension/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        
        # Check for API keys, tokens, secrets
        if grep -r -i "api[_-]key\|token\|secret\|password" --exclude-dir=node_modules . | grep -v "placeholder\|example\|template"; then
          echo "⚠️ Potential sensitive data found!"
          exit 1
        fi
        
        # Check for development URLs
        if grep -r "localhost\|127.0.0.1\|0.0.0.0" --exclude-dir=node_modules . | grep -v "comment"; then
          echo "⚠️ Development URLs found in source!"
        fi
        
        echo "✅ No obvious sensitive data detected"

  chrome-web-store:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download extension artifact
      uses: actions/download-artifact@v4
      with:
        name: chrome-extension
        path: ./
    
    - name: Upload to Chrome Web Store
      run: |
        echo "Chrome Web Store upload would go here"
        echo "This requires Chrome Web Store API credentials"
        echo "Extension file: $(ls *.zip)"
        # You would use chrome-webstore-upload-cli or similar tool here
        # npx chrome-webstore-upload-cli upload --source *.zip --extension-id YOUR_EXTENSION_ID --client-id ${{ secrets.CHROME_CLIENT_ID }} --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}

  edge-store:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download extension artifact
      uses: actions/download-artifact@v4
      with:
        name: chrome-extension
        path: ./
    
    - name: Upload to Microsoft Edge Add-ons
      run: |
        echo "Microsoft Edge Add-ons upload would go here"
        echo "Extension file: $(ls *.zip)"
        # You would implement Edge Add-ons API upload here
