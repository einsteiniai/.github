name: Dashboard CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'einsteini-dashboard/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'einsteini-dashboard/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: einsteini-dashboard
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: einsteini-dashboard/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci || npm test || echo "No test script found"
    
    - name: Check TypeScript (if applicable)
      run: npx tsc --noEmit || echo "No TypeScript configuration found"

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: einsteini-dashboard
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: einsteini-dashboard/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        CI: true
        GENERATE_SOURCEMAP: false
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-dist
        path: einsteini-dashboard/dist/

  lighthouse:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-dist
        path: einsteini-dashboard/dist/
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: .github/lighthouse/lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-dist
        path: einsteini-dashboard/dist/
    
    - name: Deploy to staging
      run: |
        echo "Add your staging deployment script here"
        echo "This could deploy to Vercel, Netlify, AWS S3, etc."
        # Example for Vercel:
        # npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-dist
        path: einsteini-dashboard/dist/
    
    - name: Deploy to production
      run: |
        echo "Add your production deployment script here"
        echo "This could deploy to your CDN, cloud storage, or hosting platform"
        # Example for AWS S3:
        # aws s3 sync dist/ s3://your-bucket-name --delete
        # aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-dist
        path: einsteini-dashboard/dist/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./einsteini-dashboard
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/einsteini-dashboard:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/einsteini-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
